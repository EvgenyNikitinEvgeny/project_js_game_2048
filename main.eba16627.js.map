{"version":3,"sources":["scripts/main.js"],"names":["newState","field","document","querySelector","button","scoreGame","messageStart","messageLose","messageWin","state","win","score","fieldChilren","children","fieldMatrix","map","row","getActionButton","classList","contains","remove","add","innerText","addСoord","addCell","findEmptyCell","y","x","randomNumber","emptyCells","forEach","rowIndex","cell","columnIndex","push","Math","floor","random","length","elem","action","e","key","left","right","up","down","gameLose","checkRows","newRow","filter","index","concat","Array","fill","reverseRows","reverse","transformState","colom","colIndex","i","some","j","addEventListener"],"mappings":"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","file":"main.eba16627.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst field = document.querySelector('tbody');\nconst button = document.querySelector('button');\nconst scoreGame = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet state = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet newState;\nlet win = false;\nlet score = 0;\nconst fieldChilren = [...field.children];\nconst fieldMatrix = fieldChilren.map(row => [...row.children]);\n\nbutton.addEventListener('click', getActionButton);\ndocument.addEventListener('keydown', action);\n\nfunction getActionButton() {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n    messageLose.classList.add('hidden', true);\n    messageWin.classList.add('hidden', true);\n  }\n\n  addСoord();\n  addСoord();\n  addCell();\n}\n\nfunction addСoord() {\n  const [y, x] = findEmptyCell();\n\n  state[y][x] = randomNumber();\n}\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction randomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction addCell() {\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const elem = fieldMatrix[rowIndex][columnIndex];\n\n      elem.classList = 'field-cell';\n\n      if (cell === 0) {\n        elem.innerText = '';\n      } else {\n        elem.innerText = cell;\n        elem.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  scoreGame.innerText = score;\n}\n\nfunction action(e) {\n  newState = state;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      left();\n      break;\n    case 'ArrowRight':\n      right();\n      break;\n    case 'ArrowUp':\n      up();\n      break;\n    case 'ArrowDown':\n      down();\n      break;\n    default:\n      return;\n  }\n  addСoord();\n  addCell();\n\n  for (let x = 0; x < state.length; x++) {\n    for (let y = 0; y < state.length; y++) {\n      if (newState[x][y] !== state[x][y]) {\n        state = newState;\n        addСoord();\n        addCell();\n      }\n    }\n  }\n\n  if (win === true) {\n    messageWin.classList.remove('hidden');\n\n    return;\n  };\n\n  if (!gameLose()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  };\n}\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newState = newState.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] = cell * 2;\n        newRow[index + 1] = 0;\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          win = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(4 - newRow.length).fill(0));\n  });\n  state = newState;\n}\n\nfunction reverseRows() {\n  newState.forEach(row => row.reverse());\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n}\n\nfunction transformState() {\n  newState = newState[0]\n    .map((colom, colIndex) => newState.map(row => row[colIndex]));\n  state = newState;\n}\n\nfunction up() {\n  transformState();\n  left();\n  transformState();\n}\n\nfunction down() {\n  transformState();\n  right();\n  transformState();\n}\n\nfunction gameLose() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transformState();\n\n  return checkRows();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < 4; i++) {\n    if (newState[i].some(cell => cell === 0)\n      || newState[i].some((cell, j) => cell === newState[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}